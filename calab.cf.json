{
  "Description": "My CA labs",
  "Parameters": {
    "VPCOctet": {
      "Type": "Number",
      "MaxValue": 255,
      "MinValue": 0,
      "Default": 0
    },
    "ImageId": {
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
      "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
    },
    "InstanceType": {
      "Type": "String",
      "Default": "t3.micro",
      "AllowedValues": [
        "t2.micro",
        "t3.micro",
        "t3.small"
      ]
    },
    "ASGMinNode": {
      "Type": "Number",
      "Default": 1
    },
    "ASGMaxNode": {
      "Type": "Number",
      "Default": 1
    }
  },
  "Resources": {
    "LabVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Fn::Join": [
            "",
            [
              "10.",
              {
                "Ref": "VPCOctet"
              },
              ".0.0/16"
            ]
          ]
        }
      }
    },
    "PublicSubnetA": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "VpcId": {
          "Ref": "LabVPC"
        },
        "CidrBlock": {
          "Fn::Join": [
            "",
            [
              "10.",
              {
                "Ref": "VPCOctet"
              },
              ".0.0/24"
            ]
          ]
        },
        "MapPublicIpOnLaunch": true
      }
    },
    "PublicSubnetB": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "VpcId": {
          "Ref": "LabVPC"
        },
        "CidrBlock": {
          "Fn::Join": [
            "",
            [
              "10.",
              {
                "Ref": "VPCOctet"
              },
              ".1.0/24"
            ]
          ]
        },
        "MapPublicIpOnLaunch": true
      }
    },
    "PrivateSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "VpcId": {
          "Ref": "LabVPC"
        },
        "CidrBlock": {
          "Fn::Join": [
            "",
            [
              "10.",
              {
                "Ref": "VPCOctet"
              },
              ".128.0/24"
            ]
          ]
        }
      }
    },
    "IGW": {
      "Type": "AWS::EC2::InternetGateway"
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "LabVPC"
        },
        "InternetGatewayId": {
          "Ref": "IGW"
        }
      }
    },
    "EIP": {
      "DependsOn": [
        "AttachGateway"
      ],
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "NAT": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "EIP",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "PublicSubnetA"
        }
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "LabVPC"
        }
      }
    },
    "PrivateRoute": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "LabVPC"
        }
      }
    },
    "IGWRoute": {
      "DependsOn": [
        "AttachGateway"
      ],
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRoute"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "IGW"
        }
      }
    },
    "NATRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRoute"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NAT"
        }
      }
    },
    "NACL": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "LabVPC"
        }
      }
    },
    "InboundNACL": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": false,
        "NetworkAclId": {
          "Ref": "NACL"
        },
        "Protocol": -1,
        "RuleAction": "allow",
        "RuleNumber": 100
      }
    },
    "OutboundNACL": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": true,
        "NetworkAclId": {
          "Ref": "NACL"
        },
        "Protocol": -1,
        "RuleAction": "allow",
        "RuleNumber": 100
      }
    },
    "PublicSubnetANACL": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnetA"
        },
        "NetworkAclId": {
          "Ref": "NACL"
        }
      }
    },
    "PublicSubnetBNACL": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnetB"
        },
        "NetworkAclId": {
          "Ref": "NACL"
        }
      }
    },
    "PrivateSubnetNACL": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet"
        },
        "NetworkAclId": {
          "Ref": "NACL"
        }
      }
    },
    "PublicSubnetARoute": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnetA"
        },
        "RouteTableId": {
          "Ref": "PublicRoute"
        }
      }
    },
    "PublicSubnetBRoute": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnetB"
        },
        "RouteTableId": {
          "Ref": "PublicRoute"
        }
      }
    },
    "PrivateRouteSubnet": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet"
        },
        "RouteTableId": {
          "Ref": "PrivateRoute"
        }
      }
    },
    "ALBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": {
          "Fn::Sub": "${AWS::StackName}-alb-sg"
        },
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80
          }
        ],
        "VpcId": {
          "Ref": "LabVPC"
        }
      }
    },
    "ALB": {
      "DependsOn": [
        "NATRoute"
      ],
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-alb"
        },
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "ALBSecurityGroup",
              "GroupId"
            ]
          }
        ],
        "Subnets": [
          {
            "Ref": "PublicSubnetA"
          },
          {
            "Ref": "PublicSubnetB"
          }
        ]
      }
    },
    "TargetGroup": {
      "DependsOn": [
        "ALB"
      ],
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-tg"
        },
        "HealthCheckIntervalSeconds": 15,
        "HealthCheckTimeoutSeconds": 10,
        "HealthyThresholdCount": 3,
        "UnhealthyThresholdCount": 3,
        "Port": 8888,
        "Protocol": "HTTP",
        "VpcId": {
          "Ref": "LabVPC"
        }
      }
    },
    "ALBListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "TargetGroup"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "ALB"
        },
        "Port": 80,
        "Protocol": "HTTP"
      }
    },
    "DynamoAcessRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        ]
      }
    },
    "DynamoDBAccessInstanceRole": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "DynamoAcessRole"
          }
        ]
      }
    },
    "EC2SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": {
          "Fn::Sub": "${AWS::StackName}-ec2-sg"
        },
        "SecurityGroupIngress": [
          {
            "SourceSecurityGroupId": {
              "Ref": "ALBSecurityGroup"
            },
            "IpProtocol": "tcp",
            "FromPort": 8888,
            "ToPort": 8888
          }
        ],
        "VpcId": {
          "Ref": "LabVPC"
        }
      }
    },
    "LaunchTemplate": {
      "Type": "AWS::EC2::LaunchTemplate",
      "Properties": {
        "LaunchTemplateName": {
          "Fn::Sub": "${AWS::StackName}-lt"
        },
        "LaunchTemplateData": {
          "IamInstanceProfile": {
            "Arn": {
              "Fn::GetAtt": [
                "DynamoDBAccessInstanceRole",
                "Arn"
              ]
            }
          },
          "ImageId": {
            "Ref": "ImageId"
          },
          "InstanceType": {
            "Ref": "InstanceType"
          },
          "SecurityGroupIds": [
            {
              "Ref": "EC2SecurityGroup"
            }
          ],
          "TagSpecifications": [
            {
              "ResourceType": "instance",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": {
                    "Fn::Sub": "${AWS::StackName}"
                  }
                }
              ]
            },
            {
              "ResourceType": "volume",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": {
                    "Fn::Sub": "${AWS::StackName}"
                  }
                }
              ]
            }
          ],
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "\n",
                [
                  "#!/bin/bash",
                  "sudo yum update -y",
                  "sudo yum install -y git",
                  "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash",
                  ". ~/.nvm/nvm.sh",
                  "nvm install node",
                  "npm config set registry http://registry.npmjs.org/",
                  "npm install -g forever",
                  "git clone https://github.com/cloudacademy/dynamo-demo",
                  {
                    "Fn::Join": [
                      "",
                      [
                        "export AWS_REGION=",
                        {
                          "Ref": "AWS::Region"
                        }
                      ]
                    ]
                  },
                  "cd dynamo-demo",
                  {
                    "Fn::Join": [
                      "",
                      [
                        "forever start server.js --port 8888 --table ",
                        {
                          "Ref": "DynamoDB"
                        }
                      ]
                    ]
                  }
                ]
              ]
            }
          }
        }
      }
    },
    "ASG": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AutoScalingGroupName": {
          "Fn::Sub": "${AWS::StackName}-asg"
        },
        "MinSize": {
          "Ref": "ASGMinNode"
        },
        "MaxSize": {
          "Ref": "ASGMaxNode"
        },
        "DesiredCapacity": {
          "Ref": "ASGMinNode"
        },
        "HealthCheckGracePeriod": 300,
        "LaunchTemplate": {
          "LaunchTemplateId": {
            "Ref": "LaunchTemplate"
          },
          "Version": {
            "Fn::GetAtt": [
              "LaunchTemplate",
              "DefaultVersionNumber"
            ]
          }
        },
        "VPCZoneIdentifier": [
          {
            "Ref": "PrivateSubnet"
          }
        ],
        "TargetGroupARNs": [
          {
            "Ref": "TargetGroup"
          }
        ]
      }
    },
    "DynamoDB": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "TableName": {
          "Fn::Sub": "${AWS::StackName}"
        },
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        }
      }
    }
  },
  "Outputs": {
    "ALBDNS": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "ALB",
                "DNSName"
              ]
            },
            "/index.html"
          ]
        ]
      }
    }
  }
}